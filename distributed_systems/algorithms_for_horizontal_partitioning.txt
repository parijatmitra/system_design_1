Range partitioning

Range partitioning is a technique where we split a dataset into ranges according to the value of a specific attribute.

Advantages of range partitioning

Simplicity and ease of implementation.

The ability to perform range queries using the partitioning key value.

A good performance for range queries that use the partitioning key, when the queried range is small and resides in a single node.

Makes adjusting ranges (re-partitioning) easier and more efficient. 
One range can be increased or decreased, which exchanges data only between two nodes.

Disadvantages of range partitioning

The inability to perform range queries using keys other than the partitioning key

A bad performance for range queries that use the partitioning key when the queried range is big and resides in multiple nodes

An uneven distribution of the traffic or data, which causes some nodes to overload. 
For example, while range partitioning through an alphabetical split, we may find that some alphabetical letters appear as the initial letters in surnames more frequently than other letters. 
This means some nodes may have to store more data and process more requests than others.


Hash partitioning

Hash partitioning is a technique where we apply a hash function to a specific attribute of each row. 
Example formula: hash(s) mod n. (n is fixed)

Advantages of hash partitioning

The ability to calculate the partitioning mapping at runtime with no need to store and maintain the mapping. 
This is beneficial both in terms of data storage needs and performance, as we don’t need any additional requests to find the mapping

A greater chance that the hash function will uniformly distribute the data across our system’s nodes, and prevent some nodes from overloading



Disadvantages of hash partitioning

The inability to perform range queries at all—even for the attribute we use as a partitioning key—without storing additional data or querying all the nodes

Adding or removing nodes from the system causes it to re-partition. This results in significant data movement across all nodes of the system.


Consistent hashing

Hash table is independent of the number of nodes.


Advantages of consistent hashing

Reduced data movement when nodes are added or removed in the system

Disadvantages of consistent hashing

The potential for the data’s non-uniform distribution because of the random assignment of nodes in the ring.

The potential for more imbalanced data distribution as nodes are added or removed. 
E.g., a node’s dataset is not distributed evenly across the system when it is removed but is instead transferred to a single node
